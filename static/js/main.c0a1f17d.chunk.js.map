{"version":3,"sources":["components/TimeStamp.js","components/ChatEntry.js","components/ChatLog.js","App.js","registerServiceWorker.js","index.js"],"names":["TimeStamp","props","time","DateTime","fromISO","absolute","toFormat","relative","toRelative","title","ChatEntry","likedStatus","liked","senderLocation","sender1","sender","className","body","timeStamp","onClick","updateChat","id","ChatLog","getChatLogJSX","entries","map","entry","index","sender2","chatMessages","App","useState","setEntries","totalLikes","reduce","total","calcTotalLikes","newEntries","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wmHAUeA,EARG,SAACC,GACjB,IAAMC,EAAOC,WAASC,QAAQH,EAAMC,MAC9BG,EAAWH,EAAKI,SAAS,2BACzBC,EAAWL,EAAKM,aAEtB,OAAO,sBAAMC,MAAOJ,EAAb,SAAwBE,KC6BlBG,G,MA/BG,SAACT,GACjB,IAAMU,EAAcV,EAAMW,MAAQ,eAAO,eACnCC,EAAiBZ,EAAMa,UAAYb,EAAMc,OAAS,QAAU,SAElE,OACE,sBAAKC,UAAS,qBAAgBH,GAA9B,UACE,oBAAIG,UAAU,aAAd,SAA4Bf,EAAMc,SAClC,0BAASC,UAAU,eAAnB,UACE,4BAAIf,EAAMgB,OACV,mBAAGD,UAAU,aAAb,SACE,cAAC,EAAD,CAAWd,KAAMD,EAAMiB,cAEzB,wBAAQF,UAAU,OAAOG,QAAS,kBAAMlB,EAAMmB,WAAWnB,EAAMoB,KAA/D,SACGV,YCsBIW,G,MAnCC,SAACrB,GACf,IAAMsB,EAAgBtB,EAAMuB,QAAQC,KAAI,SAACC,EAAOC,GAC9C,OACE,cAAC,EAAD,CAEEZ,OAAQW,EAAMX,OACdE,KAAMS,EAAMT,KACZC,UAAWQ,EAAMR,UACjBG,GAAIK,EAAML,GACVT,MAAOc,EAAMd,MACbQ,WAAYnB,EAAMmB,WAClBN,QAASb,EAAMa,QACfc,QAAS3B,EAAM2B,SARVD,MAaX,OAAO,oBAAIX,UAAU,WAAd,SAA0BO,MCjB7BT,G,MAAUe,EAAa,GAAGd,QAC1Ba,EAAUC,EAAa,GAAGd,OAgDjBe,EA9CH,WACV,MAA8BC,mBAASF,GAAvC,mBAAOL,EAAP,KAAgBQ,EAAhB,KAmBMC,EANiB,SAACT,GACtB,OAAOA,EAAQU,QAAO,SAACC,EAAOT,GAC5B,OAAOS,EAAQT,EAAMd,QACpB,GAGcwB,CAAeZ,GAElC,OACE,sBAAKH,GAAG,MAAR,UACE,mCACE,+CACgBP,EADhB,QAC8Bc,KAE9B,kCACE,qBAAIZ,UAAU,SAASK,GAAG,cAA1B,UACGY,EADH,yBAKJ,+BACE,cAAC,EAAD,CACET,QAASA,EACTJ,WAnCW,SAACC,GAClB,IAAMgB,EAAab,EAAQC,KAAI,SAACC,GAC9B,OAAIA,EAAML,KAAOA,EAGR,2BAAKK,GAAZ,IAAmBd,OAAQc,EAAMd,QAE5Bc,KAETM,EAAWK,IA2BLvB,QAASA,EACTc,QAASA,UCrCbU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,MCvEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDYlC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,IAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,IAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCvCxBkC,K","file":"static/js/main.c0a1f17d.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\n\nconst TimeStamp = (props) => {\n  const time = DateTime.fromISO(props.time);\n  const absolute = time.toFormat('MMMM Do YYYY, h:mm:ss a');\n  const relative = time.toRelative();\n\n  return <span title={absolute}>{relative}</span>;\n};\n\nexport default TimeStamp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TimeStamp from './TimeStamp';\nimport './ChatEntry.css';\n\nconst ChatEntry = (props) => {\n  const likedStatus = props.liked ? '‚ù§Ô∏è' : 'ü§ç';\n  const senderLocation = props.sender1 === props.sender ? 'local' : 'remote';\n\n  return (\n    <div className={`chat-entry ${senderLocation}`}>\n      <h2 className=\"entry-name\">{props.sender}</h2>\n      <section className=\"entry-bubble\">\n        <p>{props.body}</p>\n        <p className=\"entry-time\">\n          <TimeStamp time={props.timeStamp} />\n        </p>\n        <button className=\"like\" onClick={() => props.updateChat(props.id)}>\n          {likedStatus}\n        </button>\n      </section>\n    </div>\n  );\n};\n\nChatEntry.propTypes = {\n  sender: PropTypes.string,\n  body: PropTypes.string,\n  timeStamp: PropTypes.string,\n  id: PropTypes.number,\n  liked: PropTypes.bool,\n  updateChat: PropTypes.func,\n  sender1: PropTypes.string,\n  sender2: PropTypes.string,\n};\n\nexport default ChatEntry;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChatEntry from './ChatEntry';\nimport './ChatLog.css';\n\nconst ChatLog = (props) => {\n  const getChatLogJSX = props.entries.map((entry, index) => {\n    return (\n      <ChatEntry\n        key={index}\n        sender={entry.sender}\n        body={entry.body}\n        timeStamp={entry.timeStamp}\n        id={entry.id}\n        liked={entry.liked}\n        updateChat={props.updateChat}\n        sender1={props.sender1}\n        sender2={props.sender2}\n      />\n    );\n  });\n\n  return <ul className=\"chat-log\">{getChatLogJSX}</ul>;\n};\n\nChatLog.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      sender: PropTypes.string,\n      body: PropTypes.string,\n      timeStamp: PropTypes.string,\n      liked: PropTypes.bool,\n    })\n  ),\n  updateChat: PropTypes.func,\n  sender1: PropTypes.string,\n  sender2: PropTypes.string,\n};\n\nexport default ChatLog;\n","import React, { useState } from 'react';\nimport chatMessages from './data/messages.json';\nimport ChatLog from './components/ChatLog';\nimport './App.css';\n\nconst sender1 = chatMessages[0].sender;\nconst sender2 = chatMessages[1].sender;\n\nconst App = () => {\n  const [entries, setEntries] = useState(chatMessages);\n  const updateChat = (id) => {\n    const newEntries = entries.map((entry) => {\n      if (entry.id === id) {\n        // same as below:\n        // return Object.assign({}, entry, { liked: !entry.liked });\n        return { ...entry, liked: !entry.liked };\n      }\n      return entry;\n    });\n    setEntries(newEntries);\n  };\n\n  const calcTotalLikes = (entries) => {\n    return entries.reduce((total, entry) => {\n      return total + entry.liked;\n    }, 0);\n  };\n\n  const totalLikes = calcTotalLikes(entries);\n\n  return (\n    <div id=\"App\">\n      <header>\n        <h1>\n          Chat Between {sender1} and {sender2}\n        </h1>\n        <section>\n          <h2 className=\"widget\" id=\"heartWidget\">\n            {totalLikes} ‚ù§Ô∏ès\n          </h2>\n        </section>\n      </header>\n      <main>\n        <ChatLog\n          entries={entries}\n          updateChat={updateChat}\n          sender1={sender1}\n          sender2={sender2}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'regenerator-runtime/runtime';\nimport axios from 'axios';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}